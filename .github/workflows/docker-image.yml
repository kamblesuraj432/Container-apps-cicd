name: ECS CI/CD Pipeline
on: [push]

permissions:
  id-token: write
  contents: read

jobs:
  checkout-and-auth:
    name: 🔍 Source Setup & AWS Auth
    runs-on: ubuntu-latest
    outputs:
      image-tag: ${{ steps.set-tag.outputs.image_tag }}
      aws-region: ${{ steps.set-region.outputs.region }}  # Fixed output reference
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4
      
      - name: 🔑 Configure AWS Credentials (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::050451400373:role/Github-ECS-cicd-role
          aws-region: us-east-1
          mask-aws-account-id: false
      
      - name: 🏷️ Set Image Tag
        id: set-tag
        run: |
          echo "image_tag=${{ github.sha }}" >> $GITHUB_OUTPUT
      
      - name: 🌍 Set AWS Region
        id: set-region
        run: |
          echo "region=us-east-1" >> $GITHUB_OUTPUT

  build-and-push:
    name: 🐳 Build & Push to ECR
    needs: checkout-and-auth
    runs-on: ubuntu-latest
    outputs:
      image-uri: ${{ steps.push-image.outputs.image_uri }}
    steps:
      # ADDED CHECKOUT STEP HERE
      - name: 📥 Checkout Code
        uses: actions/checkout@v4
      
      - name: 🔑 Configure AWS Credentials (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::050451400373:role/Github-ECS-cicd-role
          aws-region: ${{ needs.checkout-and-auth.outputs.aws-region }}  # Fixed region reference
          mask-aws-account-id: false
      
      - name: 🔒 Login to Amazon ECR
        id: ecr-login
        uses: aws-actions/amazon-ecr-login@v1
        with:
          region: ${{ needs.checkout-and-auth.outputs.aws-region }}
      
      - name: 🛠️ Build Docker Image
        env:
          ECR_REGISTRY: ${{ steps.ecr-login.outputs.registry }}
          ECR_REPOSITORY: test-repo-hello-world
          IMAGE_TAG: ${{ needs.checkout-and-auth.outputs.image-tag }}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
      
      - name: ⬆️ Push to ECR
        id: push-image
        env:
          ECR_REGISTRY: ${{ steps.ecr-login.outputs.registry }}
          ECR_REPOSITORY: test-repo-hello-world
          IMAGE_TAG: ${{ needs.checkout-and-auth.outputs.image-tag }}
        run: |
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "image_uri=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

  deploy-to-ecs:
    name: 🚀 ECS Deployment
    needs: [checkout-and-auth, build-and-push]
    runs-on: ubuntu-latest
    steps:
      - name: 🔑 Configure AWS Credentials (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::050451400373:role/Github-ECS-cicd-role
          aws-region: ${{ needs.checkout-and-auth.outputs.aws-region }}
          mask-aws-account-id: false
      
      - name: 📝 Update Task Definition
        id: update-task
        env:
          IMAGE_URI: ${{ needs.build-and-push.outputs.image-uri }}
          AWS_REGION: ${{ needs.checkout-and-auth.outputs.aws-region }}
        run: |
          sudo apt-get install -y jq
          
          # Get current task definition
          CURRENT_TASK=$(aws ecs describe-task-definition \
            --task-definition taskdef \
            --region $AWS_REGION)
          
          # Update container image
          UPDATED_TASK=$(echo $CURRENT_TASK | jq \
            --arg IMAGE "$IMAGE_URI" \
            '.taskDefinition.containerDefinitions[0].image = $IMAGE')
          
          # Prepare clean task definition
          FILTERED_TASK=$(echo $UPDATED_TASK | jq '.taskDefinition | 
            del(.taskDefinitionArn, .revision, .status, 
                .requiresAttributes, .compatibilities, 
                .registeredAt, .registeredBy)')
          
          # Register new revision
          NEW_TASK=$(aws ecs register-task-definition \
            --cli-input-json "$FILTERED_TASK" \
            --region $AWS_REGION)
          
          # Extract new revision number
          NEW_REV=$(echo $NEW_TASK | jq -r '.taskDefinition.revision')
          echo "NEW_REVISION=$NEW_REV" >> $GITHUB_ENV
      
      - name: 🚀 Deploy to ECS
        env:
          AWS_REGION: ${{ needs.checkout-and-auth.outputs.aws-region }}
        run: |
          aws ecs update-service \
            --cluster kamblesuraj432-test \
            --service my-services \
            --task-definition taskdef:$NEW_REVISION \
            --force-new-deployment \
            --region $AWS_REGION
      
      - name: ✅ Verify Deployment
        env:
          AWS_REGION: ${{ needs.checkout-and-auth.outputs.aws-region }}
        run: |
          aws ecs wait services-stable \
            --cluster kamblesuraj432-test \
            --services my-services \
            --region $AWS_REGION
